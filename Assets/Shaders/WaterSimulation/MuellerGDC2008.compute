#pragma kernel Main

// Inputs ---------------------------------------
RWTexture2D<float> WaterHeight;
RWTexture2D<float> VelocityField;
RWTexture2D<float> TempHeight;

float _DeltaTime;
float _Speed;
// ----------------------------------------------

// Painting -------------------------------------
int _TextureSize;
float4 _UvHit;		// Only use xy components
float _Radius;
float _BrushStrength;
// ----------------------------------------------

void handleComputePaint(uint3 id) {
	float2 uv = id.xy / float(_TextureSize);
	float dist = distance(uv, _UvHit.xy);

	if (dist <= _Radius) {
		WaterHeight[id.xy].r += _BrushStrength * _DeltaTime;
		VelocityField[id.xy].r += _BrushStrength * _DeltaTime;
		WaterHeight[id.xy].r = clamp(WaterHeight[id.xy].r, 0, 1);
	}
}

[numthreads(16, 16, 1)]
void Main (uint3 id : SV_DispatchThreadID) {
	/*float speed = 40;
	float h = 1.0;
	float deltaTime = 1.0 / 60.0;

	float speedSquared = speed * speed;*/
	float hSquared = 0.7 * 0.7;

	int dxPositive = clamp(id.x + 1, 0, _TextureSize);
	int dyPositive = clamp(id.y + 1, 0, _TextureSize);
	int dxNegative = clamp(id.x - 1, 0, _TextureSize);
	int dyNegative = clamp(id.y - 1, 0, _TextureSize);

	float speedSquared = _Speed * _Speed;
	float acceleration = speedSquared * (WaterHeight[uint2(dxPositive, id.y)].r +
	 						WaterHeight[uint2(dxNegative, id.y)].r +
							WaterHeight[uint2(id.x, dyPositive)].r +
							WaterHeight[uint2(id.x, dyNegative)].r - 4.0 * WaterHeight[id.xy].r) / hSquared;	// / texelSize

	VelocityField[id.xy].r += acceleration;
	VelocityField[id.xy].r *= 0.99;

	// Update Heights
	TempHeight[id.xy].r = WaterHeight[id.xy].r + VelocityField[id.xy].r;

	handleComputePaint(id);
}
